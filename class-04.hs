{-
  Все задачи в этом задании должны решаться исключительно с помощью свёрток.
  Явная рекурсия не допускается. Если в решении в качестве вспомогательной
  требуется стандартная функция обработки списков (помимо fold*, scan*), она
  также должна реализовываться свёрткой.

  Каждое решение должно сопровождаться тремя различными тестовыми примерами, которые при запуске
  возвращают True, например:

  f = undefined -- решение 
  f_test1 = f undefined == undefined -- тест 1
  f_test2 = f undefined == undefined -- тест 2
  f_test3 = f undefined == undefined -- тест 3
-}

{-
 1. Простейшие функции обработки списков
  a) Найти сумму чётных элементов списка с целочисленными элементами.
  b) Найти сумму и произведение элементов списка вещественных чисел.
  с) Найти среднее арифметическое элементов списка вещественных чисел (функцией length пользоваться нельзя,
     решение должно выполняться в один проход).
  d) Найти минимальный элемент списка.
  e) Найти наименьший нечётный элемент списка с целочисленными значениями (дополнительным параметром
     функции должно быть значение, возвращаемое по умолчанию).
-}

f1a :: [Int] -> Int
f1a = foldl (\c x -> c + if even x then x else 0) 0
f1a_test1 = f1a [1,2,3,4,5,6] == 12
f1a_test2 = f1a [3,(-2),8,7,11] == 6
f1a_test3 = f1a [3,7,9] == 0

f1b :: [Double] -> (Double, Double)
f1b = foldl (\(s,p) x -> (s+x, p*x)) (0,1)
f1b_test1 = f1b [1..6] == (21,720)
f1b_test2 = f1b [3.2, 2.4, 5.0] == (10.6,38.4)
f1b_test3 = f1b [3.0,0.0,9.2] == (12.2,0)

f1c :: [Double] -> Double
f1c xs = snd res / (fst res)
  where
    res = foldl (\(c,a) x -> (c+1, a+x)) (0,0) xs
f1c_test1 = f1c [1,2,3,4,5,6] == 3.5
f1c_test2 = f1c [3,(-2),8,7,11] == 5.4
f1c_test3 = f1c [3,0,9] == 4

f1d :: Ord a => [a] -> a
f1d = foldl1 min 
f1d_test1 = f1d [1,2,3,4,5,6] == 1
f1d_test2 = f1d [3,(-2),8,7,11] == (-2)
f1d_test3 = f1d [3,0,9] == 0

f1e :: [Int] -> Int
f1e = undefined

{-
 2. Свёртки, формирующие списки
  a) Сформировать список, содержащий каждый второй элемент исходного.
  b) Сформировать список, содержащий первые n элементов исходного.
  c) Сформировать список, содержащий последние n элементов исходного.
  d) Сформировать список, содержащий все элементы исходного списка, большие левого соседа.
  e) Сформировать список, содержащий все локальные минимумы исходного списка.
  f) Дана строка, содержащая слова, разделённые одним или несколькими пробелами. Сформировать
     список слов этой строки.
  g) Разбить список на непересекающиеся подсписки длиной n элементов.
  h) Разбить список на подсписки длиной n элементов с перекрывающейся частью в k элементов (k < n).
  k) Сформировать список, содержащий все начальные элементы списка, удовлетворяющие заданному предикату.
  l) Повторить каждый элемент списка заданное количество раз.
  m) Удалить из списка повторяющиеся подряд идущие элементы.
  n) Даны два списка одинаковой длины. Сформировать список, состоящий из результатов применения
     заданной функции двух аргументов к соответствующим элементам исходных списков.
-}

f2a :: [a] -> [a]
f2a xs = snd $ foldl (\(i,acc) x -> if even i then (i+1, acc ++ [x]) else (i+1, acc)) (1,[]) xs
f2a_test1 = f2a [1,2,3,4,5,6] == [2,4,6]
f2a_test2 = f2a [3,(-2),8,7,11] == [(-2),7]
f2a_test3 = f2a [3,0,9] == [0]

f2b :: Int -> [a] -> [a]
f2b n xs = snd $ foldl (\(i,acc) x -> if i <= n then (i+1, acc ++ [x]) else (i+1, acc)) (1,[]) xs
f2b_test1 = f2b 3 [1,2,3,4,5,6] == [1,2,3]
f2b_test2 = f2b 4 [3,(-2),8,7,11] == [3,(-2),8,7]
f2b_test3 = f2b 1 [3,0,9] == [3]

f2c :: Int -> [a] -> [a]
f2c n xs = snd $ foldr (\x (i,acc) -> if i <= n then (i+1, x:acc) else (i+1, acc)) (1,[]) xs
f2c_test1 = f2c 3 [1,2,3,4,5,6] == [4,5,6]
f2c_test2 = f2c 4 [3,(-2),8,7,11] == [(-2),8,7,11]
f2c_test3 = f2c 1 [3,0,9] == [9]

f2d :: Ord a => [a] -> [a]
f2d [] = []
f2d (x:xs) = snd $ foldl (\(x,acc) y -> if y > x then (y, acc ++ [y]) else (y, acc)) (x,[]) xs
f2d_test1 = f2d [1..6] == [2..6]
f2d_test2 = f2d [3,(-2),8,7,11] == [8,11]
f2d_test3 = f2d [3,0,9] == [9]


{-
 3. Использование свёртки как носителя рекурсии (для запуска свёртки можно использовать список типа [1..n]).
  a) Найти сумму чисел от a до b.
  b) Найти сумму факториалов чисел от a до b (повторные вычисления факториалов не допускаются).
  с) Сформировать список из первых n чисел Фибоначчи.
  d) Пользуясь рядом Тейлора, вычислить значение синуса заданного числа x (использовать
     n слагаемых).
  e) Проверить, является ли заданное целое число простым.
-}

f3a :: Int -> Int -> Int
f3a a b = foldl (+) 0 [a..b]
f3a_test1 = f3a 5 12 == 68
f3a_test2 = f3a 1 5 == 15
f3a_test3 = f3a (-3) 10 == 49

f3b :: Int -> Int -> Int
f3b a b = foldl (+) 0 (scanl (*) start [a+1..b])
  where
    start = foldl (*) 1 [2..a]
f3b_test1 = f3b 1 4 == 33
f3b_test2 = f3b 3 5 == 150
f3b_test3 = f3b 2 6 == 872

f3c :: Int -> [Int]
f3c n = undefined

{-
 4. Решить задачу о поиске пути с максимальной суммой в треугольнике (см. лекцию 3) при условии,
   что необходимо дополнительно найти сам путь (к примеру, в виде закодированных направлений спуска:
   0 - влево, 1 - вправо). В решении допускается использование любых стандартных функций.
-}

{-
 5. Пусть числовые матрицы представлены списками строк. Реализовать следующие функции:
  1) транспонирование матрицы;
  2) сумма двух матриц;
  3) произведение двух матриц.
-}


{-
 6. Реализовать левую свёртку, пользуясь правой. Проанализировать поведение собственной реализации
  на бесконечных списках и сравнить его с поведением оригинальной foldl.
-}
